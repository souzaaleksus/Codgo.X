unit ClientClassesUnit;

interface

uses
  System.JSON,
  Datasnap.DSProxyRest,
  Datasnap.DSClientRest,
  Data.DBXCommon,
  Data.DBXClient,
  Data.DBXDataSnap,
  Data.DBXJSON,
  Datasnap.DSProxy,
  System.Classes,
  System.SysUtils,
  Data.DB,
  Data.SqlExpr,
  Data.DBXDBReaders,
  Data.DBXCDSReaders,
  Data.FireDACJSONReflect,
  Data.DBXJSONReflect;

type
  IDSRestCachedTFDJSONDataSets = interface;

  TServerMethodsClient = class(TDSAdminRestClient)
  private
    FDataModuleCreateCommand: TDSRestCommand;
    FGetPessoaCommand: TDSRestCommand;
    FGetPessoaCommand_Cache: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    procedure DataModuleCreate(Sender: TObject);
    function GetPessoa(const ARequestFilter: string = ''): TFDJSONDataSets;
    function GetPessoa_Cache(const ARequestFilter: string = ''): IDSRestCachedTFDJSONDataSets;
  end;

  IDSRestCachedTFDJSONDataSets = interface(IDSRestCachedObject<TFDJSONDataSets>)
  end;

  TDSRestCachedTFDJSONDataSets = class(TDSRestCachedObject<TFDJSONDataSets>, IDSRestCachedTFDJSONDataSets, IDSRestCachedCommand)
  end;

const
  TServerMethods_DataModuleCreate: array [0 .. 0] of TDSRestParameterMetaData =
    ((Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject'));

  TServerMethods_GetPessoa: array [0 .. 0] of TDSRestParameterMetaData =
    ((Name: ''; Direction: 4; DBXType: 37; TypeName: 'TFDJSONDataSets'));

  TServerMethods_GetPessoa_Cache: array [0 .. 0] of TDSRestParameterMetaData =
    ((Name: ''; Direction: 4; DBXType: 26; TypeName: 'String'));

implementation

procedure TServerMethodsClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TServerMethods."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TServerMethods_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0]
      .ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue
        (FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
  end;
  FDataModuleCreateCommand.Execute;
end;

function TServerMethodsClient.GetPessoa(const ARequestFilter: string)
  : TFDJSONDataSets;
begin
  if FGetPessoaCommand = nil then
  begin
    FGetPessoaCommand := FConnection.CreateCommand;
    FGetPessoaCommand.RequestType := 'GET';
    FGetPessoaCommand.Text := 'TServerMethods.GetPessoa';
    FGetPessoaCommand.Prepare(TServerMethods_GetPessoa);
  end;
  FGetPessoaCommand.Execute(ARequestFilter);
  if not FGetPessoaCommand.Parameters[0].Value.IsNull then
  begin
    FUnMarshal := TDSRestCommand(FGetPessoaCommand.Parameters[0]
      .ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets
        (FUnMarshal.UnMarshal(FGetPessoaCommand.Parameters[0]
        .Value.GetJSONValue(True)));
      if FInstanceOwner then
        FGetPessoaCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TServerMethodsClient.GetPessoa_Cache(const ARequestFilter: string)
  : IDSRestCachedTFDJSONDataSets;
begin
  if FGetPessoaCommand_Cache = nil then
  begin
    FGetPessoaCommand_Cache := FConnection.CreateCommand;
    FGetPessoaCommand_Cache.RequestType := 'GET';
    FGetPessoaCommand_Cache.Text := 'TServerMethods.GetPessoa';
    FGetPessoaCommand_Cache.Prepare(TServerMethods_GetPessoa_Cache);
  end;
  FGetPessoaCommand_Cache.ExecuteCache(ARequestFilter);
  Result := TDSRestCachedTFDJSONDataSets.Create
    (FGetPessoaCommand_Cache.Parameters[0].Value.GetString);
end;

constructor TServerMethodsClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TServerMethodsClient.Create(ARestConnection: TDSRestConnection;
  AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TServerMethodsClient.Destroy;
begin
  FDataModuleCreateCommand.DisposeOf;
  FGetPessoaCommand.DisposeOf;
  FGetPessoaCommand_Cache.DisposeOf;
  inherited;
end;

end.
